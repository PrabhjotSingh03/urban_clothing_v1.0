{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchAllProducts } from './productAPI';\nconst initialState = {\n  products: [],\n  status: 'idle'\n};\nexport const fetchAllProductsAsync = createAsyncThunk('product/fetchAllProducts', async () => {\n  const response = await fetchAllProducts();\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const productSlice = createSlice({\n  name: 'product',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAllProductsAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAllProductsAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.products += action.payload;\n    });\n  },\n  ts\n});\nexport const {\n  increment\n} = productSlice.actions;\nexport const selectAllProducts = state => state.product.produc;\nexport default productSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchAllProducts","initialState","products","status","fetchAllProductsAsync","response","data","productSlice","name","reducers","increment","state","value","extraReducers","builder","addCase","pending","fulfilled","action","payload","ts","actions","selectAllProducts","product","produc","reducer"],"sources":["F:/Humber 2023/Semester 3/Capstone Project/urban_clothing_v1.0/src/features/product-list/productSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchAllProducts } from './productAPI';\n\nconst initialState = {\n  products: [],\n  status: 'idle',\n};\n\n\nexport const fetchAllProductsAsync = createAsyncThunk(\n  'product/fetchAllProducts',\n  async () => {\n    const response = await fetchAllProducts();\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const productSlice = createSlice({\n  name: 'product',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAllProductsAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAllProductsAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.products += action.payload;\n      });\n  },ts\n});\n\nexport const { increment } = productSlice.actions;\n\nexport const selectAllProducts = (state) => state.product.produc;\n\nexport default productSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,gBAAgB,QAAQ,cAAc;AAE/C,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE;AACV,CAAC;AAGD,OAAO,MAAMC,qBAAqB,GAAGN,gBAAgB,CACnD,0BAA0B,EAC1B,YAAY;EACV,MAAMO,QAAQ,GAAG,MAAML,gBAAgB,CAAC,CAAC;EACzC;EACA,OAAOK,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGR,WAAW,CAAC;EACtCS,IAAI,EAAE,SAAS;EACfP,YAAY;EACZ;EACAQ,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACC,KAAK,IAAI,CAAC;IAClB;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACX,qBAAqB,CAACY,OAAO,EAAGL,KAAK,IAAK;MACjDA,KAAK,CAACR,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDY,OAAO,CAACX,qBAAqB,CAACa,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MAC3DP,KAAK,CAACR,MAAM,GAAG,MAAM;MACrBQ,KAAK,CAACT,QAAQ,IAAIgB,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC;EACN,CAAC;EAACC;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEV;AAAU,CAAC,GAAGH,YAAY,CAACc,OAAO;AAEjD,OAAO,MAAMC,iBAAiB,GAAIX,KAAK,IAAKA,KAAK,CAACY,OAAO,CAACC,MAAM;AAEhE,eAAejB,YAAY,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}