{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchAllProducts, fetchProductsByFilters, fetchBrands, fetchCategories, fetchProductById, productCreate, productUpdate } from \"./productAPI\";\nconst initialState = {\n  products: [],\n  brands: [],\n  categories: [],\n  status: \"idle\",\n  totalItems: 0,\n  selectedProduct: null\n};\nexport const fetchProductByIdAsync = createAsyncThunk(\"product/fetchProductById\", async id => {\n  const response = await fetchProductById(id);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const fetchProductsByFiltersAsync = createAsyncThunk(\"product/fetchProductsByFilters\", async ({\n  filter,\n  sort,\n  pagination,\n  admin\n}) => {\n  const response = await fetchProductsByFilters(filter, sort, pagination, admin);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const fetchBrandsAsync = createAsyncThunk(\"product/fetchBrands\", async () => {\n  const response = await fetchBrands();\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const fetchCategoriesAsync = createAsyncThunk(\"product/fetchCategories\", async () => {\n  const response = await fetchCategories();\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const productCreateAsync = createAsyncThunk(\"product/productCreate\", async product => {\n  const response = await productCreate(product);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const productUpdateAsync = createAsyncThunk(\"product/productUpdate\", async update => {\n  const response = await productUpdate(update);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const productSlice = createSlice({\n  name: \"product\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    },\n    selectedProductClear: state => {\n      state.selectedProduct = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchProductsByFiltersAsync.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchProductsByFiltersAsync.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      state.products = action.payload.products;\n      state.totalItems = action.payload.totalItems;\n    }).addCase(fetchBrandsAsync.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchBrandsAsync.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      state.brands = action.payload;\n    }).addCase(fetchCategoriesAsync.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchCategoriesAsync.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      state.categories = action.payload;\n    }).addCase(fetchProductByIdAsync.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchProductByIdAsync.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      state.selectedProduct = action.payload;\n    }).addCase(productCreateAsync.pending, state => {\n      state.status = \"loading\";\n    }).addCase(productCreateAsync.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      state.products.push(action.payload);\n    }).addCase(productUpdateAsync.pending, state => {\n      state.status = \"loading\";\n    }).addCase(productUpdateAsync.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      const index = state.products.findIndex(product => product.id === action.payload.id);\n      state.products[index] = action.payload;\n    });\n  }\n});\nexport const {\n  increment\n} = productSlice.actions;\nexport const selectAllProducts = state => state.product.products;\nexport const selectBrands = state => state.product.brands;\nexport const selectCategories = state => state.product.categories;\nexport const selectProductById = state => state.product.selectedProduct;\nexport const selectTotalItems = state => state.product.totalItems;\nexport const {\n  selectedProductClear\n} = productSlice.actions;\nexport default productSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchAllProducts","fetchProductsByFilters","fetchBrands","fetchCategories","fetchProductById","productCreate","productUpdate","initialState","products","brands","categories","status","totalItems","selectedProduct","fetchProductByIdAsync","id","response","data","fetchProductsByFiltersAsync","filter","sort","pagination","admin","fetchBrandsAsync","fetchCategoriesAsync","productCreateAsync","product","productUpdateAsync","update","productSlice","name","reducers","increment","state","value","selectedProductClear","extraReducers","builder","addCase","pending","fulfilled","action","payload","push","index","findIndex","actions","selectAllProducts","selectBrands","selectCategories","selectProductById","selectTotalItems","reducer"],"sources":["D:/Humber 2023/Semester 3/Capstone Project/urban_clothing_v1.0/src/features/product-list/productSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  fetchAllProducts,\r\n  fetchProductsByFilters,\r\n  fetchBrands,\r\n  fetchCategories,\r\n  fetchProductById,\r\n  productCreate,\r\n  productUpdate,\r\n} from \"./productAPI\";\r\n\r\nconst initialState = {\r\n  products: [],\r\n  brands: [],\r\n  categories: [],\r\n  status: \"idle\",\r\n  totalItems: 0,\r\n  selectedProduct: null,\r\n};\r\n\r\nexport const fetchProductByIdAsync = createAsyncThunk(\r\n  \"product/fetchProductById\",\r\n  async (id) => {\r\n    const response = await fetchProductById(id);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const fetchProductsByFiltersAsync = createAsyncThunk(\r\n  \"product/fetchProductsByFilters\",\r\n  async ({ filter, sort, pagination, admin}) => {\r\n    const response = await fetchProductsByFilters(filter, sort, pagination, admin);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const fetchBrandsAsync = createAsyncThunk(\r\n  \"product/fetchBrands\",\r\n  async () => {\r\n    const response = await fetchBrands();\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const fetchCategoriesAsync = createAsyncThunk(\r\n  \"product/fetchCategories\",\r\n  async () => {\r\n    const response = await fetchCategories();\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const productCreateAsync = createAsyncThunk(\r\n  \"product/productCreate\",\r\n  async (product) => {\r\n    const response = await productCreate(product);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const productUpdateAsync = createAsyncThunk(\r\n  \"product/productUpdate\",\r\n  async (update) => {\r\n    const response = await productUpdate(update);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const productSlice = createSlice({\r\n  name: \"product\",\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.value += 1;\r\n    },\r\n    selectedProductClear:(state) => {\r\n      state.selectedProduct = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchProductsByFiltersAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchProductsByFiltersAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        state.products = action.payload.products;\r\n        state.totalItems = action.payload.totalItems;\r\n      })\r\n      .addCase(fetchBrandsAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchBrandsAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        state.brands = action.payload;\r\n      })\r\n      .addCase(fetchCategoriesAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchCategoriesAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        state.categories = action.payload;\r\n      })\r\n      .addCase(fetchProductByIdAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchProductByIdAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        state.selectedProduct = action.payload;\r\n      })\r\n      .addCase(productCreateAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(productCreateAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        state.products.push(action.payload);\r\n      })\r\n      .addCase(productUpdateAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(productUpdateAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        const index = state.products.findIndex(\r\n          (product) => product.id === action.payload.id\r\n        );\r\n        state.products[index] = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment } = productSlice.actions;\r\nexport const selectAllProducts = (state) => state.product.products;\r\nexport const selectBrands = (state) => state.product.brands;\r\nexport const selectCategories = (state) => state.product.categories;\r\nexport const selectProductById = (state) => state.product.selectedProduct;\r\nexport const selectTotalItems = (state) => state.product.totalItems;\r\nexport const { selectedProductClear } = productSlice.actions;\r\n\r\nexport default productSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}