{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { createOrder, fetchAllOrders } from \"./orderAPI\";\nconst initialState = {\n  orders: [],\n  status: \"idle\",\n  orderCurrent: null\n};\nexport const createOrderAsync = createAsyncThunk(\"order/createOrder\", async order => {\n  const response = await createOrder(order);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const fetchAllOrdersAsync = createAsyncThunk(\"order/fetchAllOrders\", async order => {\n  const response = await fetchAllOrders(order);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const orderSlice = createSlice({\n  name: \"order\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    },\n    orderReset: state => {\n      state.orderCurrent = null;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(createOrderAsync.pending, state => {\n      state.status = \"loading\";\n    }).addCase(createOrderAsync.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      state.orders.push(action.payload);\n      state.orderCurrent = action.payload;\n    });\n  }\n});\nexport const {\n  orderReset\n} = orderSlice.actions;\nexport const selectOrderCurrent = state => state.order.orderCurrent;\nexport default orderSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","createOrder","fetchAllOrders","initialState","orders","status","orderCurrent","createOrderAsync","order","response","data","fetchAllOrdersAsync","orderSlice","name","reducers","increment","state","value","orderReset","extraReducers","builder","addCase","pending","fulfilled","action","push","payload","actions","selectOrderCurrent","reducer"],"sources":["D:/Humber 2023/Semester 3/Capstone Project/urban_clothing_v1.0/src/features/order/orderSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { createOrder, fetchAllOrders } from \"./orderAPI\";\r\n\r\nconst initialState = {\r\n  orders: [],\r\n  status: \"idle\",\r\n  orderCurrent: null,\r\n};\r\n\r\nexport const createOrderAsync = createAsyncThunk(\r\n  \"order/createOrder\",\r\n  async (order) => {\r\n    const response = await createOrder(order);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const fetchAllOrdersAsync = createAsyncThunk(\r\n  \"order/fetchAllOrders\",\r\n  async (order) => {\r\n    const response = await fetchAllOrders(order);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const orderSlice = createSlice({\r\n  name: \"order\",\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.value += 1;\r\n    },\r\n    orderReset: (state) => {\r\n      state.orderCurrent = null;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(createOrderAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(createOrderAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        state.orders.push(action.payload);\r\n        state.orderCurrent = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { orderReset } = orderSlice.actions;\r\nexport const selectOrderCurrent = (state) => state.order.orderCurrent;\r\nexport default orderSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,WAAW,EAAEC,cAAc,QAAQ,YAAY;AAExD,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE,MAAM;EACdC,YAAY,EAAE;AAChB,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGR,gBAAgB,CAC9C,mBAAmB,EACnB,MAAOS,KAAK,IAAK;EACf,MAAMC,QAAQ,GAAG,MAAMR,WAAW,CAACO,KAAK,CAAC;EACzC;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAGZ,gBAAgB,CACjD,sBAAsB,EACtB,MAAOS,KAAK,IAAK;EACf,MAAMC,QAAQ,GAAG,MAAMP,cAAc,CAACM,KAAK,CAAC;EAC5C;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAME,UAAU,GAAGZ,WAAW,CAAC;EACpCa,IAAI,EAAE,OAAO;EACbV,YAAY;EACZ;EACAW,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACC,KAAK,IAAI,CAAC;IAClB,CAAC;IACDC,UAAU,EAAGF,KAAK,IAAK;MACrBA,KAAK,CAACV,YAAY,GAAG,IAAI;IAC3B;EACF,CAAC;EACD;EACA;EACAa,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACd,gBAAgB,CAACe,OAAO,EAAGN,KAAK,IAAK;MAC5CA,KAAK,CAACX,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDgB,OAAO,CAACd,gBAAgB,CAACgB,SAAS,EAAE,CAACP,KAAK,EAAEQ,MAAM,KAAK;MACtDR,KAAK,CAACX,MAAM,GAAG,MAAM;MACrBW,KAAK,CAACZ,MAAM,CAACqB,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MACjCV,KAAK,CAACV,YAAY,GAAGkB,MAAM,CAACE,OAAO;IACrC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER;AAAW,CAAC,GAAGN,UAAU,CAACe,OAAO;AAChD,OAAO,MAAMC,kBAAkB,GAAIZ,KAAK,IAAKA,KAAK,CAACR,KAAK,CAACF,YAAY;AACrE,eAAeM,UAAU,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}