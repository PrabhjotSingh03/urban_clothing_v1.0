{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { createUser, checkUser, updateUser } from './authAPI';\nconst initialState = {\n  value: 0,\n  status: 'idle',\n  loggedInUser: null,\n  error: null\n};\nexport const createUserAsync = createAsyncThunk('user/createUser', async userData => {\n  const response = await createUser(userData);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const checkUserAsync = createAsyncThunk('user/checkUser', async loginInfo => {\n  const response = await checkUser(loginInfo);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const updateUserAsync = createAsyncThunk('user/updateUser', async user => {\n  const response = await updateUser(user);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'user',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(createUserAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(createUserAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.loggedInUser = action.payload;\n    }).addCase(checkUserAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(checkUserAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.loggedInUser = action.payload;\n    }).addCase(checkUserAsync.rejected, (state, action) => {\n      state.status = 'idle';\n      state.error = action.error;\n    }).addCase(updateUserAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateUserAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.loggedInUser = action.payload;\n    });\n  }\n});\nexport const selectLoggedInUser = state => state.auth.loggedInUser;\nexport const {\n  increment\n} = counterSlice.actions;\nexport default counterSlice.reducer;\nexport const selectError = state => state.auth.error;","map":{"version":3,"names":["createAsyncThunk","createSlice","createUser","checkUser","updateUser","initialState","value","status","loggedInUser","error","createUserAsync","userData","response","data","checkUserAsync","loginInfo","updateUserAsync","user","counterSlice","name","reducers","increment","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","selectLoggedInUser","auth","actions","reducer","selectError"],"sources":["D:/Humber 2023/Semester 3/Capstone Project/urban_clothing_v1.0/src/features/auth/authSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { createUser, checkUser, updateUser } from './authAPI';\r\n \r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n  loggedInUser: null,\r\n  error: null\r\n};\r\n\r\nexport const createUserAsync = createAsyncThunk(\r\n  'user/createUser',\r\n  async (userData) => {\r\n    const response = await createUser(userData);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const checkUserAsync = createAsyncThunk(\r\n  'user/checkUser',\r\n  async (loginInfo) => {\r\n    const response = await checkUser(loginInfo);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const updateUserAsync = createAsyncThunk(\r\n  'user/updateUser',\r\n  async (user) => {\r\n    const response = await updateUser(user);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.value += 1;\r\n    },\r\n\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(createUserAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(createUserAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.loggedInUser = action.payload;\r\n      })\r\n      .addCase(checkUserAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(checkUserAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.loggedInUser = action.payload;\r\n      })\r\n      .addCase(checkUserAsync.rejected, (state, action) => {\r\n        state.status = 'idle';\r\n        state.error = action.error;\r\n      })\r\n      .addCase(updateUserAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(updateUserAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.loggedInUser = action.payload;\r\n      });\r\n  },\r\n});\r\nexport const selectLoggedInUser = (state) => state.auth.loggedInUser;\r\nexport const { increment } = counterSlice.actions;\r\nexport default counterSlice.reducer;\r\nexport const selectError = (state) => state.auth.error;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}