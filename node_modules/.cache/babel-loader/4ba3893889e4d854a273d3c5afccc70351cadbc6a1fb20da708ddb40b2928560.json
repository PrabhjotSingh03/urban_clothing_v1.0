{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './userAPI';\nimport { fetchUserOrders, updateUser, fetchLoggedInUser } from './userAPI';\nconst initialState = {\n  status: 'idle',\n  userInfo: null\n};\nexport const fetchUserOrdersAsync = createAsyncThunk('user/fetchUserOrders', async id => {\n  const response = await fetchUserOrders(id);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const updateUserAsync = createAsyncThunk('user/updateUser', async update => {\n  const response = await updateUser(update);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const fetchLoggedInUserAsync = createAsyncThunk('user/fetchLoggedInUser', async id => {\n  const response = await fetchLoggedInUser(id);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(fetchUserOrdersAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchUserOrdersAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.userOrders = action.payload;\n    }).addCase(updateUserAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateUserAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.userOrders = action.payload;\n    }).addCase(fetchLoggedInUserAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchLoggedInUserAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.userInfo = action.payload;\n    });\n  }\n});\nexport const selectOrdersOfUser = state => state.user.userOrders;\nexport default userSlice.reducer;\nexport const selectUserInfo = state => state.user.userInfo;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","fetchUserOrders","updateUser","fetchLoggedInUser","initialState","status","userInfo","fetchUserOrdersAsync","id","response","data","updateUserAsync","update","fetchLoggedInUserAsync","userSlice","name","reducers","increment","state","value","extraReducers","builder","addCase","pending","fulfilled","action","userOrders","payload","selectOrdersOfUser","user","reducer","selectUserInfo"],"sources":["D:/Humber 2023/Semester 3/Capstone Project/urban_clothing_v1.0/src/features/user/userSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './userAPI';\r\nimport { fetchUserOrders, updateUser, fetchLoggedInUser } from './userAPI';\r\n\r\nconst initialState = {\r\n  status: 'idle',\r\n  userInfo: null,\r\n};\r\n\r\n\r\nexport const fetchUserOrdersAsync = createAsyncThunk(\r\n  'user/fetchUserOrders',\r\n  async (id) => {\r\n    const response = await fetchUserOrders(id);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const updateUserAsync = createAsyncThunk(\r\n  'user/updateUser',\r\n  async (update) => {\r\n    const response = await updateUser(update);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const fetchLoggedInUserAsync = createAsyncThunk(\r\n  'user/fetchLoggedInUser',\r\n  async (id) => {\r\n    const response = await fetchLoggedInUser(id);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.value += 1;\r\n    },\r\n\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchUserOrdersAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchUserOrdersAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.userOrders = action.payload;\r\n      })\r\n      .addCase(updateUserAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(updateUserAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.userOrders = action.payload;\r\n      })\r\n      .addCase(fetchLoggedInUserAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchLoggedInUserAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.userInfo = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const selectOrdersOfUser = (state) => state.user.userOrders;\r\nexport default userSlice.reducer;\r\nexport const selectUserInfo = (state) => state.user.userInfo;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,UAAU,QAAQ,WAAW;AACtC,SAASC,eAAe,EAAEC,UAAU,EAAEC,iBAAiB,QAAQ,WAAW;AAE1E,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,MAAM;EACdC,QAAQ,EAAE;AACZ,CAAC;AAGD,OAAO,MAAMC,oBAAoB,GAAGT,gBAAgB,CAClD,sBAAsB,EACtB,MAAOU,EAAE,IAAK;EACZ,MAAMC,QAAQ,GAAG,MAAMR,eAAe,CAACO,EAAE,CAAC;EAC1C;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGb,gBAAgB,CAC7C,iBAAiB,EACjB,MAAOc,MAAM,IAAK;EAChB,MAAMH,QAAQ,GAAG,MAAMP,UAAU,CAACU,MAAM,CAAC;EACzC;EACA,OAAOH,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMG,sBAAsB,GAAGf,gBAAgB,CACpD,wBAAwB,EACxB,MAAOU,EAAE,IAAK;EACZ,MAAMC,QAAQ,GAAG,MAAMN,iBAAiB,CAACK,EAAE,CAAC;EAC5C;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMI,SAAS,GAAGf,WAAW,CAAC;EACnCgB,IAAI,EAAE,MAAM;EACZX,YAAY;EACZ;EACAY,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACC,KAAK,IAAI,CAAC;IAClB;EAEF,CAAC;EACD;EACA;EACAC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACf,oBAAoB,CAACgB,OAAO,EAAGL,KAAK,IAAK;MAChDA,KAAK,CAACb,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDiB,OAAO,CAACf,oBAAoB,CAACiB,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MAC1DP,KAAK,CAACb,MAAM,GAAG,MAAM;MACrBa,KAAK,CAACQ,UAAU,GAAGD,MAAM,CAACE,OAAO;IACnC,CAAC,CAAC,CACDL,OAAO,CAACX,eAAe,CAACY,OAAO,EAAGL,KAAK,IAAK;MAC3CA,KAAK,CAACb,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDiB,OAAO,CAACX,eAAe,CAACa,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MACrDP,KAAK,CAACb,MAAM,GAAG,MAAM;MACrBa,KAAK,CAACQ,UAAU,GAAGD,MAAM,CAACE,OAAO;IACnC,CAAC,CAAC,CACDL,OAAO,CAACT,sBAAsB,CAACU,OAAO,EAAGL,KAAK,IAAK;MAClDA,KAAK,CAACb,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDiB,OAAO,CAACT,sBAAsB,CAACW,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MAC5DP,KAAK,CAACb,MAAM,GAAG,MAAM;MACrBa,KAAK,CAACZ,QAAQ,GAAGmB,MAAM,CAACE,OAAO;IACjC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,kBAAkB,GAAIV,KAAK,IAAKA,KAAK,CAACW,IAAI,CAACH,UAAU;AAClE,eAAeZ,SAAS,CAACgB,OAAO;AAChC,OAAO,MAAMC,cAAc,GAAIb,KAAK,IAAKA,KAAK,CAACW,IAAI,CAACvB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}