{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { createOrder } from './orderAPI';\nconst initialState = {\n  orders: [],\n  status: 'idle'\n};\nexport const createOrderAsync = createAsyncThunk('order/createOrder', async order => {\n  const response = await createOrder(order);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'order',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(createOrderAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(createOrderAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.orders.push(action.payload);\n    });\n  }\n});\nexport const {\n  increment\n} = counterSlice.actions;\n\n//export const selectCount = (state) => state.counter.value;\n\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","createOrder","initialState","orders","status","createOrderAsync","order","response","data","counterSlice","name","reducers","increment","state","value","extraReducers","builder","addCase","pending","fulfilled","action","push","payload","actions","reducer"],"sources":["D:/Humber 2023/Semester 3/Capstone Project/urban_clothing_v1.0/src/features/order/orderSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { createOrder } from './orderAPI';\r\n\r\nconst initialState = {\r\n  orders: [],\r\n  status: 'idle',\r\n};\r\n\r\n\r\nexport const createOrderAsync = createAsyncThunk(\r\n  'order/createOrder',\r\n  async (order) => {\r\n    const response = await createOrder(order);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'order',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.value += 1;\r\n    },\r\n\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(createOrderAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(createOrderAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.orders.push(action.payload);\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment } = counterSlice.actions;\r\n\r\n//export const selectCount = (state) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,WAAW,QAAQ,YAAY;AAExC,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE;AACV,CAAC;AAGD,OAAO,MAAMC,gBAAgB,GAAGN,gBAAgB,CAC9C,mBAAmB,EACnB,MAAOO,KAAK,IAAK;EACf,MAAMC,QAAQ,GAAG,MAAMN,WAAW,CAACK,KAAK,CAAC;EACzC;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGT,WAAW,CAAC;EACtCU,IAAI,EAAE,OAAO;EACbR,YAAY;EACZ;EACAS,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACC,KAAK,IAAI,CAAC;IAClB;EAEF,CAAC;EACD;EACA;EACAC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACZ,gBAAgB,CAACa,OAAO,EAAGL,KAAK,IAAK;MAC5CA,KAAK,CAACT,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDa,OAAO,CAACZ,gBAAgB,CAACc,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MACtDP,KAAK,CAACT,MAAM,GAAG,MAAM;MACrBS,KAAK,CAACV,MAAM,CAACkB,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IACnC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEV;AAAU,CAAC,GAAGH,YAAY,CAACc,OAAO;;AAEjD;;AAEA,eAAed,YAAY,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}