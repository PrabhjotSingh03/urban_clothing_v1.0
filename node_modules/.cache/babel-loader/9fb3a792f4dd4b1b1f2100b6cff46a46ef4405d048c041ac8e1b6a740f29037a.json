{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './userAPI';\nimport { fetchUserOrders } from './userAPI';\nconst initialState = {\n  userOrders: [],\n  status: 'idle'\n};\nexport const fetchUserOrdersAsync = createAsyncThunk('user/fetchUserOrders', async amount => {\n  const response = await fetchUserOrders(amount);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(fetchUserOrdersAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchUserOrdersAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.userOrders = action.payload;\n    });\n  }\n});\nexport const {\n  increment\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","fetchUserOrders","initialState","userOrders","status","fetchUserOrdersAsync","amount","response","data","userSlice","name","reducers","increment","state","value","extraReducers","builder","addCase","pending","fulfilled","action","payload","actions","reducer"],"sources":["D:/Humber 2023/Semester 3/Capstone Project/urban_clothing_v1.0/src/features/user/userSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './userAPI';\r\nimport { fetchUserOrders } from './userAPI';\r\n\r\nconst initialState = {\r\n  userOrders: [],\r\n  status: 'idle',\r\n};\r\n\r\n\r\nexport const fetchUserOrdersAsync = createAsyncThunk(\r\n  'user/fetchUserOrders',\r\n  async (amount) => {\r\n    const response = await fetchUserOrders(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.value += 1;\r\n    },\r\n\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchUserOrdersAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchUserOrdersAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.userOrders = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment } = userSlice.actions;\r\nexport default userSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,UAAU,QAAQ,WAAW;AACtC,SAASC,eAAe,QAAQ,WAAW;AAE3C,MAAMC,YAAY,GAAG;EACnBC,UAAU,EAAE,EAAE;EACdC,MAAM,EAAE;AACV,CAAC;AAGD,OAAO,MAAMC,oBAAoB,GAAGP,gBAAgB,CAClD,sBAAsB,EACtB,MAAOQ,MAAM,IAAK;EAChB,MAAMC,QAAQ,GAAG,MAAMN,eAAe,CAACK,MAAM,CAAC;EAC9C;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGV,WAAW,CAAC;EACnCW,IAAI,EAAE,MAAM;EACZR,YAAY;EACZ;EACAS,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACC,KAAK,IAAI,CAAC;IAClB;EAEF,CAAC;EACD;EACA;EACAC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACZ,oBAAoB,CAACa,OAAO,EAAGL,KAAK,IAAK;MAChDA,KAAK,CAACT,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDa,OAAO,CAACZ,oBAAoB,CAACc,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MAC1DP,KAAK,CAACT,MAAM,GAAG,MAAM;MACrBS,KAAK,CAACV,UAAU,GAAGiB,MAAM,CAACC,OAAO;IACnC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAET;AAAU,CAAC,GAAGH,SAAS,CAACa,OAAO;AAC9C,eAAeb,SAAS,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}