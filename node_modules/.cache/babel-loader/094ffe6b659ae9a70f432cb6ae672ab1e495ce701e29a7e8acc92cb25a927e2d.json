{"ast":null,"code":"import _regeneratorRuntime from\"D:/Humber 2023/Semester 3/Capstone Project/urban_clothing_v1.0/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/Humber 2023/Semester 3/Capstone Project/urban_clothing_v1.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";var _ref;import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import{fetchCount}from'./counterAPI';var initialState={value:0,status:'idle'};export var incrementAsync=createAsyncThunk('counter/fetchCount',function(_x){return(_ref=_ref||_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(amount){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return fetchCount(amount);case 2:response=_context.sent;return _context.abrupt(\"return\",response.data);case 4:case\"end\":return _context.stop();}},_callee);}))).apply(this,arguments);});export var counterSlice=createSlice({name:'counter',initialState:initialState,// The `reducers` field lets us define reducers and generate associated actions\nreducers:{increment:function increment(state){state.value+=1;}},// The `extraReducers` field lets the slice handle actions defined elsewhere,\n// including actions generated by createAsyncThunk or in other slices.\nextraReducers:function extraReducers(builder){builder.addCase(incrementAsync.pending,function(state){state.status='loading';}).addCase(incrementAsync.fulfilled,function(state,action){state.status='idle';state.value+=action.payload;});}});var increment=counterSlice.actions.increment;export{increment};export var selectCount=function selectCount(state){return state.counter.value;};export default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","_x","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","amount","response","wrap","_callee$","_context","prev","next","sent","abrupt","data","stop","apply","arguments","counterSlice","name","reducers","increment","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","actions","selectCount","counter","reducer"],"sources":["D:/Humber 2023/Semester 3/Capstone Project/urban_clothing_v1.0/src/features/counter/counterSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.value += 1;\r\n    },\r\n\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment } = counterSlice.actions;\r\n\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n"],"mappings":"iUAAA,OAASA,gBAAgB,CAAEC,WAAW,KAAQ,kBAAkB,CAChE,OAASC,UAAU,KAAQ,cAAc,CAEzC,GAAM,CAAAC,YAAY,CAAG,CACnBC,KAAK,CAAE,CAAC,CACRC,MAAM,CAAE,MACV,CAAC,CAGD,MAAO,IAAM,CAAAC,cAAc,CAAGN,gBAAgB,CAC5C,oBAAoB,UAAAO,EAAA,SAAAC,IAAA,CAAAA,IAAA,EAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CACpB,SAAAC,QAAOC,MAAM,MAAAC,QAAA,QAAAJ,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAE,IAAA,SACY,CAAAjB,UAAU,CAACW,MAAM,CAAC,QAAnCC,QAAQ,CAAAG,QAAA,CAAAG,IAAA,QAAAH,QAAA,CAAAI,MAAA,UAEPP,QAAQ,CAACQ,IAAI,0BAAAL,QAAA,CAAAM,IAAA,MAAAX,OAAA,GACrB,IAAAY,KAAA,MAAAC,SAAA,GACH,CAAC,CAED,MAAO,IAAM,CAAAC,YAAY,CAAGzB,WAAW,CAAC,CACtC0B,IAAI,CAAE,SAAS,CACfxB,YAAY,CAAZA,YAAY,CACZ;AACAyB,QAAQ,CAAE,CACRC,SAAS,CAAE,SAAAA,UAACC,KAAK,CAAK,CACpBA,KAAK,CAAC1B,KAAK,EAAI,CAAC,CAClB,CAEF,CAAC,CACD;AACA;AACA2B,aAAa,CAAE,SAAAA,cAACC,OAAO,CAAK,CAC1BA,OAAO,CACJC,OAAO,CAAC3B,cAAc,CAAC4B,OAAO,CAAE,SAACJ,KAAK,CAAK,CAC1CA,KAAK,CAACzB,MAAM,CAAG,SAAS,CAC1B,CAAC,CAAC,CACD4B,OAAO,CAAC3B,cAAc,CAAC6B,SAAS,CAAE,SAACL,KAAK,CAAEM,MAAM,CAAK,CACpDN,KAAK,CAACzB,MAAM,CAAG,MAAM,CACrByB,KAAK,CAAC1B,KAAK,EAAIgC,MAAM,CAACC,OAAO,CAC/B,CAAC,CAAC,CACN,CACF,CAAC,CAAC,CAEK,GAAQ,CAAAR,SAAS,CAAKH,YAAY,CAACY,OAAO,CAAlCT,SAAS,CAA0B,OAAAA,SAAA,EAElD,MAAO,IAAM,CAAAU,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAIT,KAAK,QAAK,CAAAA,KAAK,CAACU,OAAO,CAACpC,KAAK,GAEzD,cAAe,CAAAsB,YAAY,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}