{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { createOrder, fetchAllOrders, orderUpdate } from \"./orderAPI\";\nconst initialState = {\n  orders: [],\n  status: \"idle\",\n  orderCurrent: null,\n  ordersTotal: 0\n};\nexport const createOrderAsync = createAsyncThunk(\"order/createOrder\", async order => {\n  const response = await createOrder(order);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const fetchAllOrdersAsync = createAsyncThunk(\"order/fetchAllOrders\", async (sort, pagination) => {\n  const response = await fetchAllOrders(sort, pagination);\n  return response.data;\n});\nexport const orderUpdateAsync = createAsyncThunk(\"order/orderUpdate\", async order => {\n  const response = await orderUpdate(order);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const orderSlice = createSlice({\n  name: \"order\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    },\n    orderReset: state => {\n      state.orderCurrent = null;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(createOrderAsync.pending, state => {\n      state.status = \"loading\";\n    }).addCase(createOrderAsync.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      state.orders.push(action.payload);\n      state.orderCurrent = action.payload;\n    }).addCase(fetchAllOrdersAsync.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchAllOrdersAsync.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      state.orders = action.payload.orders;\n      state.ordersTotal = action.payload.totalOrders;\n    }).addCase(orderUpdateAsync.pending, state => {\n      state.status = \"loading\";\n    }).addCase(orderUpdateAsync.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      const index = state.orders.findIndex(order => order.id === action.payload.id);\n      state.orders[index] = action.payload;\n    });\n  }\n});\nexport const {\n  orderReset\n} = orderSlice.actions;\nexport const selectOrderCurrent = state => state.order.orderCurrent;\nexport const selectOrders = state => state.order.orders;\nexport const selectOrdersTotal = state => state.order.ordersTotal;\nexport default orderSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","createOrder","fetchAllOrders","orderUpdate","initialState","orders","status","orderCurrent","ordersTotal","createOrderAsync","order","response","data","fetchAllOrdersAsync","sort","pagination","orderUpdateAsync","orderSlice","name","reducers","increment","state","value","orderReset","extraReducers","builder","addCase","pending","fulfilled","action","push","payload","totalOrders","index","findIndex","id","actions","selectOrderCurrent","selectOrders","selectOrdersTotal","reducer"],"sources":["D:/Humber 2023/Semester 3/Capstone Project/urban_clothing_v1.0/src/features/order/orderSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { createOrder, fetchAllOrders, orderUpdate } from \"./orderAPI\";\r\n\r\nconst initialState = {\r\n  orders: [],\r\n  status: \"idle\",\r\n  orderCurrent: null,\r\n  ordersTotal: 0,\r\n};\r\n\r\nexport const createOrderAsync = createAsyncThunk(\r\n  \"order/createOrder\",\r\n  async (order) => {\r\n    const response = await createOrder(order);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const fetchAllOrdersAsync = createAsyncThunk(\r\n  \"order/fetchAllOrders\",\r\n  async (sort, pagination) => {\r\n    const response = await fetchAllOrders(sort, pagination);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const orderUpdateAsync = createAsyncThunk(\r\n  \"order/orderUpdate\",\r\n  async (order) => {\r\n    const response = await orderUpdate(order);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const orderSlice = createSlice({\r\n  name: \"order\",\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.value += 1;\r\n    },\r\n    orderReset: (state) => {\r\n      state.orderCurrent = null;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(createOrderAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(createOrderAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        state.orders.push(action.payload);\r\n        state.orderCurrent = action.payload;\r\n      })\r\n      .addCase(fetchAllOrdersAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchAllOrdersAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        state.orders = action.payload.orders;\r\n        state.ordersTotal = action.payload.totalOrders;\r\n      })\r\n      .addCase(orderUpdateAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(orderUpdateAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        const index = state.orders.findIndex((order) => order.id === action.payload.id);\r\n        state.orders[index] = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { orderReset } = orderSlice.actions;\r\nexport const selectOrderCurrent = (state) => state.order.orderCurrent;\r\nexport const selectOrders = (state) => state.order.orders;\r\nexport const selectOrdersTotal = (state) => state.order.ordersTotal;\r\n\r\nexport default orderSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}