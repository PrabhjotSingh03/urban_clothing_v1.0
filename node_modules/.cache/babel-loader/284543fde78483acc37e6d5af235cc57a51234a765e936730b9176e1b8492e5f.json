{"ast":null,"code":"import { isRejected } from \"@reduxjs/toolkit\";\nexport function createUser(userData) {\n  return new Promise(async resolve => {\n    const response = await fetch(\"http://localhost:8000/auth/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await response.json();\n    resolve({\n      data\n    });\n  });\n}\nexport function checkUser(loginInfo) {\n  return new Promise(async (resolve, reject) => {\n    // const email = loginInfo.email;\n    // const password = loginInfo.password;\n    try {\n      const response = await fetch(\"http://localhost:8000/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(loginInfo)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        resolve({\n          data\n        });\n      } else {\n        const error = await response.text();\n        reject(error);\n      }\n    } catch (error) {\n      reject(error);\n    }\n    // const data = await response.json();\n    // console.log({data});\n    // if(data.length){\n    //   if(password===data[0].password){\n    //     resolve({data:data[0]})\n    //   }else{\n    //     reject({message:'User not found'})\n    //   }\n    // }else{\n    //   reject({message:'User not found'})\n    // }\n  });\n}\n\nexport function loginUser(loginInfo) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(loginInfo)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        resolve({\n          data\n        });\n      } else {\n        const error = await response.text();\n        reject(error);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nexport function checkAuth() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(loginInfo)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        resolve({\n          data\n        });\n      } else {\n        const error = await response.text();\n        reject(error);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nexport function signOut(userId) {\n  return new Promise(async resolve => {\n    resolve({\n      data: \"successfully signed out\"\n    });\n  });\n}","map":{"version":3,"names":["isRejected","createUser","userData","Promise","resolve","response","fetch","method","headers","body","JSON","stringify","data","json","checkUser","loginInfo","reject","ok","error","text","loginUser","checkAuth","signOut","userId"],"sources":["D:/Humber 2023/Semester 3/Capstone Project/urban_clothing_v1.0/src/features/auth/authAPI.js"],"sourcesContent":["import { isRejected } from \"@reduxjs/toolkit\";\r\n\r\nexport function createUser(userData) {\r\n  return new Promise(async (resolve) => {\r\n    const response = await fetch(\"http://localhost:8000/auth/signup\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n    const data = await response.json();\r\n    resolve({ data });\r\n  });\r\n}\r\n\r\nexport function checkUser(loginInfo) {\r\n  return new Promise(async (resolve, reject) => {\r\n    // const email = loginInfo.email;\r\n    // const password = loginInfo.password;\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/auth/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(loginInfo),\r\n      });\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        resolve({ data });\r\n      } else {\r\n        const error = await response.text();\r\n        reject(error);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n    // const data = await response.json();\r\n    // console.log({data});\r\n    // if(data.length){\r\n    //   if(password===data[0].password){\r\n    //     resolve({data:data[0]})\r\n    //   }else{\r\n    //     reject({message:'User not found'})\r\n    //   }\r\n    // }else{\r\n    //   reject({message:'User not found'})\r\n    // }\r\n  });\r\n}\r\n\r\nexport function loginUser(loginInfo) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/auth/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(loginInfo),\r\n      });\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        resolve({ data });\r\n      } else {\r\n        const error = await response.text();\r\n        reject(error);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\nexport function checkAuth() {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/auth/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(loginInfo),\r\n      });\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        resolve({ data });\r\n      } else {\r\n        const error = await response.text();\r\n        reject(error);\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\nexport function signOut(userId) {\r\n  return new Promise(async (resolve) => {\r\n    resolve({ data: \"successfully signed out\" });\r\n  });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}