{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { addToCart } from './cartAPI';\nconst initialState = {\n  value: 0,\n  items: []\n};\nexport const addToCartAsync = createAsyncThunk('cart/addToCart', async item => {\n  const response = await addToCart(item);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment\n} = counterSlice.actions;\nexport const selectCount = state => state.counter.value;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","addToCart","initialState","value","items","addToCartAsync","item","response","data","counterSlice","name","reducers","increment","state","extraReducers","builder","addCase","incrementAsync","pending","status","fulfilled","action","payload","actions","selectCount","counter","reducer"],"sources":["D:/Humber 2023/Semester 3/Capstone Project/urban_clothing_v1.0/src/features/cart/cartSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { addToCart } from './cartAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  items: [],\r\n};\r\n\r\n\r\nexport const addToCartAsync = createAsyncThunk(\r\n  'cart/addToCart',\r\n  async (item) => {\r\n    const response = await addToCart(item);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.value += 1;\r\n    },\r\n\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment } = counterSlice.actions;\r\n\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,SAAS,QAAQ,WAAW;AAErC,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CAAC;EACRC,KAAK,EAAE;AACT,CAAC;AAGD,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC5C,gBAAgB,EAChB,MAAOO,IAAI,IAAK;EACd,MAAMC,QAAQ,GAAG,MAAMN,SAAS,CAACK,IAAI,CAAC;EACtC;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGT,WAAW,CAAC;EACtCU,IAAI,EAAE,SAAS;EACfR,YAAY;EACZ;EACAS,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACV,KAAK,IAAI,CAAC;IAClB;EAEF,CAAC;EACD;EACA;EACAW,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACC,cAAc,CAACC,OAAO,EAAGL,KAAK,IAAK;MAC1CA,KAAK,CAACM,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDH,OAAO,CAACC,cAAc,CAACG,SAAS,EAAE,CAACP,KAAK,EAAEQ,MAAM,KAAK;MACpDR,KAAK,CAACM,MAAM,GAAG,MAAM;MACrBN,KAAK,CAACV,KAAK,IAAIkB,MAAM,CAACC,OAAO;IAC/B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEV;AAAU,CAAC,GAAGH,YAAY,CAACc,OAAO;AAEjD,OAAO,MAAMC,WAAW,GAAIX,KAAK,IAAKA,KAAK,CAACY,OAAO,CAACtB,KAAK;AAEzD,eAAeM,YAAY,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}